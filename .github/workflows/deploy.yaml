name: "‚òÅÔ∏è Deploy infrastructure"

on:
  push:

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  issues: write
  pull-requests: write

jobs:
  hello:
    name: "‚öì Starting"
    runs-on: ubuntu-latest
    steps:
      - name: Starting
        run: |
          echo "Starting CI/CD of ${{ github.repository }}"

  deploy_to_development:
    needs: hello
    name: "‚úàÔ∏è Deploy to development environment"
    if: ${{ github.ref != 'refs/heads/main' }}
    environment:
      name: development
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: eu-central-1
          role-to-assume: ${{ secrets.DEV_DEPLOY_ROLE }}
          role-session-name: GithubOIDC
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false
      - uses: actions/github-script@v6
        id: set-result
        env:
           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            return output
      - name: Plan result
        run: echo "${{steps.set-result.outputs.result}}"
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
          

